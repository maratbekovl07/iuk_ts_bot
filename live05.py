import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import openai
import sqlite3
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

openai.api_key = "OPENAI_API_KEY"
bot = telebot.TeleBot('7759072375:AAFOzaKYQShuSrteyMxmHfQzoT5BX3E956U')  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω

ADMIN_GROUP_ID = -4777086960  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
banned_users = set()  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

FORBIDDEN_WORDS = []  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞

def contains_profanity(text):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.
    """
    for word in FORBIDDEN_WORDS:
        if word in text.lower():  # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            return True
    return False

# –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_DEFAULT = "default"
STATE_IT_HUB_CONTACT = "it_hub_contact"
STATE_AVN_RESTORE = "avn_restore"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('messages.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message_type TEXT,
            content TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def set_user_state(user_id, state):
    conn = sqlite3.connect('messages.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS user_states (
            user_id INTEGER PRIMARY KEY,
            state TEXT
        )
    ''')
    c.execute('INSERT OR REPLACE INTO user_states (user_id, state) VALUES (?, ?)', (user_id, state))
    conn.commit()
    conn.close()

def get_user_state(user_id):
    conn = sqlite3.connect('messages.db')
    c = conn.cursor()
    c.execute('SELECT state FROM user_states WHERE user_id = ?', (user_id,))
    state = c.fetchone()
    conn.close()
    return state[0] if state else STATE_DEFAULT

def save_message_to_db(user_id, message_type, content):
    conn = sqlite3.connect('messages.db')
    c = conn.cursor()
    c.execute('INSERT INTO messages (user_id, message_type, content) VALUES (?, ?, ?)', (user_id, message_type, content))
    conn.commit()
    conn.close()

@bot.message_handler(commands=['start'])
def main(message):
    if message.chat.id == ADMIN_GROUP_ID:
        admin_menu(message)
        return

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
    main_menu.add(KeyboardButton("üìò AVN"), KeyboardButton("üåê –°–∞–π—Ç –∫–æ–ª–ª–µ–¥–∂–∞"))
    main_menu.add(KeyboardButton("üîí –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ AVN"), KeyboardButton("‚úâÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ IT Hab"))

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç –ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞ –ú–£–ö–†! üéì\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu
    )

def admin_menu(message):
    # –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_menu = ReplyKeyboardMarkup(resize_keyboard=True)
    admin_menu.add(KeyboardButton("üìã –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π"), KeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"))
    admin_menu.add(KeyboardButton("üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"))

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! üë®‚Äçüíª\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_menu
    )

@bot.message_handler(func=lambda message: message.text == "üìã –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π" and message.chat.id == ADMIN_GROUP_ID)
def show_queue(message):
    conn = sqlite3.connect('messages.db')
    c = conn.cursor()
    c.execute('SELECT user_id, message_type, content FROM messages')
    rows = c.fetchall()
    conn.close()

    if not rows:
        bot.send_message(message.chat.id, "üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        return

    queue_summary = "üìã –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
    for user_id, message_type, content in rows:
        queue_summary += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:\n"
        if message_type == 'text':
            queue_summary += f"  ‚úâÔ∏è –¢–µ–∫—Å—Ç: {content[:50]}...\n"
        elif message_type == 'photo':
            queue_summary += f"  üì∏ –§–æ—Ç–æ (ID: {content})\n"
        queue_summary += "\n"

    bot.send_message(message.chat.id, queue_summary)

@bot.message_handler(func=lambda message: message.text == "‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" and message.chat.id == ADMIN_GROUP_ID)
def reply_instruction(message):
    bot.send_message(
        message.chat.id,
        "–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
        "`/reply <user_id> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>`\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `/reply 123456789 –î–æ–±—Ä—ã–π –¥–µ–Ω—å, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.`",
        parse_mode="Markdown"
    )

def user_exists(user_id):
    conn = sqlite3.connect('messages.db')
    c = conn.cursor()
    c.execute('SELECT 1 FROM messages WHERE user_id = ?', (user_id,))
    exists = c.fetchone() is not None
    conn.close()
    return exists

@bot.message_handler(commands=['reply'])
def reply_to_user(message):
    if message.chat.id != ADMIN_GROUP_ID:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return

    try:
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: `/reply <user_id> <–æ—Ç–≤–µ—Ç>`", parse_mode="Markdown")
            return

        user_id = int(parts[1])
        reply_text = parts[2]

        if user_exists(user_id):
            bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}")
            bot.send_message(message.chat.id, f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            conn = sqlite3.connect('messages.db')
            c = conn.cursor()
            c.execute('DELETE FROM messages WHERE user_id = ?', (user_id,))
            conn.commit()
            conn.close()
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: message.text == "üìò AVN")
def avn_portal(message):
    set_user_state(message.chat.id, STATE_AVN_RESTORE)  # –ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    bot.send_message(
        message.chat.id,
        "üìò –ü–æ—Ä—Ç–∞–ª AVN:\n\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–æ—Ä—Ç–∞–ª AVN –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—É—á–∞—é—â–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º:\n"
        "[AVN Portal](https://avn.pc.edu.kg/lms/login)",
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda message: message.text == "üåê –°–∞–π—Ç –∫–æ–ª–ª–µ–¥–∂–∞")
def site(message):
    set_user_state(message.chat.id, STATE_AVN_RESTORE)  # –ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    bot.send_message(
        message.chat.id,
        "üåê –ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂ –ú–£–ö–†:\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∫–æ–ª–ª–µ–¥–∂–∞:\n"
        "[WEB Site](https://pc.edu.kg)",
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda message: message.text == "‚úâÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ IT Hab")
def it_hab_contact(message):
    set_user_state(message.chat.id, STATE_IT_HUB_CONTACT)
    bot.send_message(
        message.chat.id,
        "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è IT Hab. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    )

@bot.message_handler(func=lambda message: message.text == "üîí –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ AVN")
def restore_avn(message):
    set_user_state(message.chat.id, STATE_AVN_RESTORE)
    bot.send_message(
        message.chat.id,
        "–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤ AVN –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
        "1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞–ø–æ—Ä—Ç –ø–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º—É –Ω–∏–∂–µ —à–∞–±–ª–æ–Ω—É.\n"
        "2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞–ø–æ—Ä—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (–§–ò–û, –≥—Ä—É–ø–ø–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞).\n\n"
        "‚ö†Ô∏è –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –±—É–¥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    )
    try:
        with open('—à–∞–±–ª–æ–Ω.png', 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption="üìé –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–ø–æ—Ä—Ç–∞:")
    except FileNotFoundError:
        bot.send_message(message.chat.id, "‚ùå –®–∞–±–ª–æ–Ω —Ä–∞–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    bot.send_message(
        message.chat.id,
        "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞–ø–æ—Ä—Ç, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–ø–æ—Ä—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —á–∞—Ç."
    )

@bot.message_handler(content_types=['photo', 'text'])
def handle_user_message(message):
    user_id = message.chat.id
    state = get_user_state(user_id)

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == ADMIN_GROUP_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in banned_users:
        bot.send_message(user_id, "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    if message.text and contains_profanity(message.text):
        bot.send_message(user_id, "üö´ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞. –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        banned_users.add(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        bot.send_message(ADMIN_GROUP_ID, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—É
    if state == STATE_DEFAULT:
        bot.send_message(user_id, "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    if state == STATE_IT_HUB_CONTACT:
        handle_message_for_admin(message, user_id)
    elif state == STATE_AVN_RESTORE:
        handle_message_for_admin(message, user_id)
    else:
        bot.send_message(user_id, "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

def handle_message_for_admin(message, user_id):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    if message.photo:
        photo_id = message.photo[-1].file_id
        save_message_to_db(user_id, 'photo', photo_id)
        bot.send_photo(
            ADMIN_GROUP_ID,
            photo_id,
            caption=f"üì∏ –§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n–ò–º—è: {message.from_user.first_name}\n"
                    f"–§–∞–º–∏–ª–∏—è: {message.from_user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                    f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )
        bot.send_message(user_id, "–í–∞—à–µ —Ñ–æ—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    elif message.text:
        save_message_to_db(user_id, 'text', message.text)
        bot.send_message(
            ADMIN_GROUP_ID,
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
            f"–ò–º—è: {message.from_user.first_name}\n"
            f"–§–∞–º–∏–ª–∏—è: {message.from_user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        )
        bot.send_message(user_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    # –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    set_user_state(user_id, STATE_DEFAULT)

if __name__ == "__main__":
    init_db()
    bot.infinity_polling()
